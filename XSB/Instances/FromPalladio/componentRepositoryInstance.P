% BEGIN IMPORTS
:- import  return/1
           from palladio.
% END IMPORTS

justify_pred(inputParameters(_,_)).
justify_pred(outputParameters(_,_)).
justify_pred(provides(_,_)).
justify_pred(requires(_,_)).



services(Interface, Service) :-
        signatures(Interface,Services),
        member(Interface, Services).

inputParameters(Service,parm(Service,ParameterName)) :-
        % operationSignature(Service),
        parameters(Service, Parameters),
        member(ParameterName, Parameters)

outputParameters(Service,return(Service)) :-
        % operationSignature(Service),
        returnType(Service,Type).

% TODO: this just cannot work with the current palladio fact export: if there are two different signatures with a common parameter name X,
% *two* facts dataType(X,Type) are generated.
typeOf(parm(Service,ParameterName),Type) :-
        dataType(Parameter,Type).
typeOf(return(Service),Type) :-
        returnType(Service,Type).

provides(Component, Interface) :-
        basicComponent(Component),
        providedRoles(Component,Roles), member(Role,Roles),
        providedInterface(Role,Interface).

requires(Component, Interface) :-
        basicComponent(Component),
        requiredRoles(Component,Roles), member(Role,Roles),
        requiredInterface(Role,Interface).
