% BEGIN IMPORTS
:- import  append/3
           from basics.
:- import  none/0
           from security.
:- import  return/1,
           providedInterfacesOn/3,
           requiredInterfacesOn/3
           from palladio.
:- import  member/2
           from lists.

:- import  world/1
           from worldInstance.

:- import  mayKnowData/2,
           location/1,
           locations/2,
           locationsAndTamperProtectionsPairs/2,
           adversary/1,
           tamperProtections/2,
           connectionType/2,
           resourceContainer/1,
           dataTargets/2,
           dataSetMapEntry/1,
           parameterSources/2,
           parametersAndDataPairs/2,
           providedRole/2,
           requiredRole/2,
           requiredInterface/2,
           resourceContainer/2,
           assemblyContext/2,
           assemblyContext_AllocationContext/2,
           outerRequiredRole/2,
           providedInterface/2,
           outerProvidedRole/2,
           linkingResource/1,
           sharing/2,
           dataSet/1,
           leftInterfaces/2,
           rightInterfaces/2,
           rightSpecificationParameter/2,
           leftSpecificationParameter/2,
           specificationParametersToReplace/2,
           assignedKey/2,
           equations/2,
           requiringAssemblyContext/2,
	   providingAssemblyContext/2,
           innerRequiredRole/2,
           requiredDelegationConnector/1,
           innerProvidedRole/2,
           providedDelegationConnector/1,
           assignments/2,
           assemblyConnector/1,
           nameFor/2,
	   map/2,

	   parameterizedDataSetMapEntry/1,
	   parameter/2,
	   sizeOf/1,
	   call/0,
	   return/0
           from fromPalladio.

:- import  returnParameter/2,
	   hasService/2,
           hasParameter/2
           from componentRepositoryInstance.
% END IMPORTS

justify_pred(mayknow(_,_)).
justify_pred(includes(_,_,_,_)).
justify_pred(includesCall(_,_,_,_)).
justify_pred(tamperingAbilities(_,_,_)).
justify_pred(locationsAccessibleBy(_,_)).
justify_pred(furtherConnections(_,_)).
justify_pred(sharingOf(_,_)).
justify_pred(location(_,_,_)).
justify_pred(linkLocation(_,_,_)).
justify_pred(dataset(_)).
justify_pred(attacker(_)).
justify_pred(lookupDataSetParameterNames(_,_,_,_,_)).

isLocation(Location) :- location(Location).


lookupDataSets(Context, required(Interface), Dataset) :-
        hasService(Interface,Service),
        requiredInterfacesOn(_Container,Interface,Context),
        parametersAndDataPairs(Service, Pairs),
        member(Pair, Pairs),
        dataTargets(Pair, Datasets),
        member(Dataset, Datasets).
lookupDataSets(Context, provided(Interface), Dataset) :-
        hasService(Interface,Service),
        providedInterfacesOn(_Container,Interface,Context),
        parametersAndDataPairs(Service, Pairs),
        member(Pair, Pairs),
        dataTargets(Pair, Datasets),
        member(Dataset, Datasets).



% specificationParametersAt(AssemblyContext,SpecificationParameter).
specificationParametersAt(AssemblyContext, Interface, SpecificationParameter) :-
	parameterizedDataSetMapEntry(DataSet),
	lookupDataSets(AssemblyContext, Interface, DataSet),
	parameter(DataSet,SpecificationParameters),
	member(SpecificationParameter, SpecificationParameters).

withVar([],[]).
withVar([X|XS], [(X,_Y)|WV]) :- withVar(XS, WV).


equal((AssemblyContext, Interface1WithRole,  SpecificationParameter1), (AssemblyContext, Interface2WithRole,  SpecificationParameter2)) :-
       ( Interface1WithRole = required(Interface1)
       ; Interface1WithRole = provided(Interface1)
       ),
       ( Interface2WithRole = required(Interface2)
       ; Interface2WithRole = provided(Interface2)
       ),
       equations(AssemblyContext, Equations),
       member(Equation, Equations),
       % specificationParameterEquation(Equation),
       leftSpecificationParameter(Equation, [SpecificationParameter1]),
       rightSpecificationParameter(Equation, [SpecificationParameter2]),
       leftInterfaces(Equation,LeftInterfaces),
       member(Interface1, LeftInterfaces),
       rightInterfaces(Equation,RightInterfaces),
       member(Interface2, RightInterfaces).
equal((AssemblyContext1, required(Interface),  SpecificationParameter), (AssemblyContext2, provided(Interface),  SpecificationParameter)) :-
       assemblyConnector(Connector),
       requiringAssemblyContext(Connector, AssemblyContexts1),
       member(AssemblyContext1,  AssemblyContexts1),
       requiredRole(Connector, Roles1), member(Role1, Roles1), requiredInterface(Role1, Interfaces1), member(Interface, Interfaces1),
       providingAssemblyContext(Connector, AssemblyContexts2),
       member(AssemblyContext2,  AssemblyContexts2),
       providedRole(Connector, Roles2), member(Role2, Roles2), providedInterface(Role2, Interfaces2), member(Interface, Interfaces2),
       specificationParametersAt(AssemblyContext1, required(Interface), SpecificationParameter),
       specificationParametersAt(AssemblyContext2, provided(Interface), SpecificationParameter),
       not(assignedBy(_Assignment, Connector, SpecificationParameter, _Key)).

connectorFor((AssemblyContext, required(Interface)), Connector) :-
	(  (assemblyConnector(Connector),
	    requiringAssemblyContext(Connector, Contexts), member(AssemblyContext, Contexts), requiredRole(Connector, Roles)
	   )
	;  (requiredDelegationConnector(Connector),
	               assemblyContext(Connector, Contexts), member(AssemblyContext, Contexts), innerRequiredRole(Connector, Roles), member(Role, Roles), requiredInterface(Role, Interfaces)
	   )
	),
	member(Role, Roles),
	requiredInterface(Role, Interfaces),
	member(Interface, Interfaces).
connectorFor((AssemblyContext, provided(Interface)), Connector) :-
	(  (assemblyConnector(Connector),
	      providingAssemblyContext(Connector, Contexts), member(AssemblyContext, Contexts), providedRole(Connector, Roles)
	   )
	;  (providedDelegationConnector(Connector),
	               assemblyContext(Connector, Contexts), member(AssemblyContext, Contexts), innerProvidedRole(Connector, Roles), member(Role, Roles), providedInterface(Role, Interfaces)
	   )
	),
	member(Role, Roles),
	providedInterface(Role, Interfaces),
	member(Interface, Interfaces).

assignedBy(Assignment, Connector, SpecificationParameter, Key) :-
	assignments(Connector, Assignments),
	member(Assignment, Assignments),
	assignedKey(Assignment, [Key]),
	specificationParametersToReplace(Assignment,SpecificationParameters),
	member(SpecificationParameter, SpecificationParameters).


specificationParameters(WithVars) :-
	setof((_AssemblyContext, _Interface, _SpecificationParameter), specificationParametersAt(_AssemblyContext, _Interface, _SpecificationParameter), _Parameters),
	!,
	withVar(_Parameters, WithVars),
	bagof(     (Left, Right),  equal(Left, Right), Equals),
	unifyAll(WithVars, Equals).
specificationParameters([]).

mylookup(K,[(K,V)|_], V) :- !.
mylookup(K,[_|KVS], V) :- mylookup(K,KVS,V).

mmap([],_,[]).
mmap([X|Xs],P,[Y|Ys]) :-
    call(P,X,Y),
    mmap(Xs,P,Ys).
toList((Left,Key),(Left, [Key])).
toConstraint(World, Constraints) :- mmap(World, toList, Constraints).

mergeAll([],[]).
mergeAll([W], Constraints) :- toConstraint(W, Constraints).
mergeAll([W|Ws], Constraints) :-
       mergeAll(Ws, Cs),
       toConstraint(W, C),
       merge(C,Cs, Constraints).
 
merge([], [], []).
merge([(Left, [Var1])|C1s], [(Left, [Var2])|C2s], [(Left, [Var1])|Constraints]) :-
       var(Var1), var(Var2),
       !,
       merge(C1s, C2s, Constraints).
merge([(Left, [Var1])|C1s], [(Left,  Keys2)|C2s], [(Left,  Keys2)|Constraints]) :-
       var(Var1),
       !,
       merge(C1s, C2s, Constraints).
merge([(Left,  Keys1)|C1s], [(Left, [Var2])|C2s], [(Left,  Keys1)|Constraints]) :-
       var(Var2),
       !,
       merge(C1s, C2s, Constraints).
merge([(Left,  Keys1)|C1s], [(Left, Keys2)|C2s], [(Left,   KeysS)|Constraints]) :-
       append(Keys1, Keys2, Keys),
       sort(Keys,KeysS),
       merge(C1s, C2s, Constraints).

sworld(World) :-
	specificationParameters(WithVars),
	World = WithVars.
sconstraints(WithVars, ExplicitConstraints) :-
	findall( (WithVars), assignConnectors(WithVars), Worlds),
	mergeAll(Worlds, Constraints),
	makeExplicitUnconstraint(Constraints, ExplicitConstraints).

possibleValueFor(SpecificationParameter, ParameterValue) :-
	parameter(DataSetMapEntry, [SpecificationParameter]),
	% parameterizedDataSetMapEntry(DataSetMapEntry),
	map(DataSetMapEntry, [Parameterized]),
	map(DataSetRef,      [Parameterized]),
	nameFor(DataSetRef, [ParameterValue]),
	dataSetMapEntry(DataSetRef).

makeExplicitUnconstraint([], []).
makeExplicitUnconstraint([((AssemblyContext, Interface, SpecificationParameter), [Var])|Cs],
                         [((AssemblyContext, Interface, SpecificationParameter), ParameterValues)|CsExplicit]) :-
	var(Var),
	setof((ParameterValue), possibleValueFor(SpecificationParameter, ParameterValue), ParameterValues),
	makeExplicitUnconstraint(Cs, CsExplicit).
makeExplicitUnconstraint([((AssemblyContext, Interface, SpecificationParameter), [Val|Vals])|Cs],
                         [((AssemblyContext, Interface, SpecificationParameter), [Val|Vals])|CsExplicit]) :-
	nonvar(Val),
	makeExplicitUnconstraint(Cs, CsExplicit).

	
assignConnectors(World) :-
	connectorFor((AssemblyContext, InterfaceWithRole), Connector),
	assignedBy(_Assignment, Connector, SpecificationParameter, Key),
	mylookup((AssemblyContext, InterfaceWithRole, SpecificationParameter), World, Key).



unifyAll(_, []).
unifyAll(WithVars, [(Left,Right)|Rest]) :-
	mylookup(Left,  WithVars, Var1),
	mylookup(Right, WithVars, Var2),
	Var1 = Var2,
	!,
	unifyAll(WithVars, Rest).
unifyAll(WithVars, [(_,_)|Rest]) :-
	unifyAll(WithVars, Rest).



% TODO: there currently appears to be no palladio stereotype corresponding to uiInterfaceOn, as was required in the paper submission.
% Instead, i consider every interface provided by the system as an uiInterface. Isn't this what we want?
uiInterfaceOn(Container,Interface) :-
        outerProvidedRole(Connector,[ProvidedRole]),
        assemblyContext(Connector, [AssemblyContext]),
        assemblyContext_AllocationContext(AllocationContext,[AssemblyContext]),
        resourceContainer(AllocationContext,[Container]),
        providedInterface(ProvidedRole,[Interface]).
uiInterfaceOn(Container,Interface) :-
        outerRequiredRole(Connector,[ProvidedRole]),
        assemblyContext(Connector,        [AssemblyContext]),
        assemblyContext_AllocationContext(AllocationContext,[AssemblyContext]),
        resourceContainer(AllocationContext,[Container]),
        requiredInterface(ProvidedRole,[Interface]).


dataset(Dataset) :- dataSet(Dataset).
dataset(DatasetMapEntry) :- dataSetMapEntry(DatasetMapEntry).

attacker(Attacker) :- adversary(Attacker).

mayknow(Attacker,Dataset) :-
        mayKnowData(Attacker, Datasets),
        member(Dataset, Datasets).

% First: non-connection-specific paramatersAndDataPairs
% cases such as: parameterSources(6,[..,x,..]).
%    as well as: parameterSources(6,[..,sizeOf(x),..]).
includes(parm(Service,ParameterName), Dataset, Context, World) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(ParameterName, ParameterNames).

% cases such as: parameterSources(6,[..,*,..]).
includes(parm(Service,ParameterName), Dataset, Context, World) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(*, ParameterNames).
includes(return(Service), Dataset, Context, World) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(*, ParameterNames).
includes(sizeOf(return(Service)), Dataset, Context, World) :-
        returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(*, ParameterNames).


% cases such as: parameterSources(6,[..,sizeOf(*),..]).
includes(parm(Service,sizeOf(ParameterName)), Dataset,Context, World) :-
        hasParameter(Service, parm(Service,sizeOf(ParameterName))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(sizeOf(*), ParameterNames).

includes(sizeOf(return(Service)), Dataset,Context, World) :-
        returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(sizeOf(*), ParameterNames).


% cases such as: parameterSources(6,[..,return,..]).
includes(return(Service), Dataset, Context, World) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(return, ParameterNames).

% TODO ALL default for calls? if nothing is specified no knowledge that a call has happened my flow
includesCall(Service, Dataset,Context, World) :-
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(call, ParameterNames).
includesCall(Service, Dataset,Context, World) :-
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World),
        member(*, ParameterNames).



dataSetMapEntryFor((DataSetRef, ParameterValue), DataSetMapEntry) :-
	map(DataSetRef,      [Parameterized]),
	map(DataSetMapEntry, [Parameterized]),
	dataSetMapEntry(DataSetMapEntry),
	nameFor(DataSetMapEntry, [ParameterValue]).

interfaceRole(Context, Interface, required(Interface)) :-
        requiredInterfacesOn(_Container,Interface,Context).
interfaceRole(Context, Interface, provided(Interface)) :-
        providedInterfacesOn(_Container,Interface,Context).
lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, world((World, Constraints))) :-
        hasService(Interface,Service),
        interfaceRole(Context, Interface, InterfaceWithRole),
        parametersAndDataPairs(Service, Pairs),
        member(Pair, Pairs),
        parameterSources(Pair,ParameterNames),
        dataTargets(Pair, DatasetRefs),
        member(DatasetRef, DatasetRefs),
        ( (dataSetMapEntry(DatasetRef),
	     Dataset = DatasetRef
	  )
	; (parameterizedDataSetMapEntry(DatasetRef),
	     parameter(DatasetRef, [Parameter]),
	     mylookup((Context, InterfaceWithRole, Parameter), World, ParameterValue),
	     ( (var(ParameterValue),
	          fmt_write_string(Error, "uninstantiated ParameterValue %S for (%S, %S, %S) in world %S", args(ParameterValue, Context, InterfaceWithRole, Parameter, World)),
	          throw(Error)
	       )
	     ; (nonvar(ParameterValue),
	          dataSetMapEntryFor((DatasetRef, ParameterValue), Dataset)
	       )
	     )
	  )
	; (dataSet(DatasetRef),
	     Dataset = DatasetRef
	  )
	).


limitTo((              _,                 _), [], []).
limitTo((AssemblyContext, InterfaceWithRole),
        [((AssemblyContext, InterfaceWithRole, SpecificationParameter), Val)|Rest],
        [((AssemblyContext, InterfaceWithRole, SpecificationParameter), Val)|RestLimited]) :-
	!,
	limitTo((AssemblyContext, InterfaceWithRole),Rest, RestLimited).
limitTo((AssemblyContext, InterfaceWithRole),
        [((              _,                 _,                      _),   _)|Rest],
                                                                             RestLimited) :-
	limitTo((AssemblyContext, InterfaceWithRole),Rest, RestLimited).

worldFor((AssemblyContext, InterfaceWithRole), world((World, Constraints)), world((WorldFor, []))) :-
	limitTo((AssemblyContext, InterfaceWithRole), World, WorldFor),
	assignAllInWorld(WorldFor, Constraints).

assignAllInWorld([], _).
assignAllInWorld([((AssemblyContext, InterfaceWithRole, SpecificationParameter), ParameterValue)|Rest],  Constraints) :-
	mylookup((AssemblyContext, InterfaceWithRole, SpecificationParameter), Constraints, PossibleParameterValues),
	member(ParameterValue, PossibleParameterValues),
	assignAllInWorld(Rest, Constraints).



% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
tamperingAbilities(Attacker, Location, TamperProtection) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations),
        tamperProtections(Pair, TamperProtections),
        member(TamperProtection, TamperProtections).
tamperingAbilities(Attacker, Location, none) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location, Locations).

% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationsAccessibleBy(Attacker, Location) :-
        attacker(Attacker),
        isLocation(Location),
        once(tamperingAbilities(Attacker, Location, _TamperProtection)).


furtherConnections(Container,Mode) :- connectionType(Container,[Mode]).

sharingOf(Container,Mode) :- sharing(Container,[Mode]).
sharingOf(Container,exclusive) :-
        resourceContainer(Container),
        not(sharing(Container,_)).
sharingOf(Container,exclusive) :-
        sharing(Container,[]),
        resourceContainer(Container).



% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair) :-
        resourceContainer(Container),
        locationsAndTamperProtectionsPairs(Container,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).
location(Container,Location, TamperProtection) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
location(Container,Location, none) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(_TamperProtection, TamperProptections)
        )).


% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
% TODO MAX explain the semantics of an empty tamper protection set for the system spec and the adversary spec
linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair) :-
        linkingResource(LinkingResource),
        locationsAndTamperProtectionsPairs(LinkingResource,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).

linkLocation(LinkingResource,Location, TamperProtection) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
linkLocation(LinkingResource,Location, none) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(_TamperProtection, TamperProptections)
        )).

