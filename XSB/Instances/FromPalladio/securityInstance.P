% BEGIN IMPORTS
:- import  none/0
           from security.
:- import  return/1,
	   interfacesOn/3
           from palladio.
:- import  member/2
           from lists.

:- import  mayKnowData/2,
           location/1,
           locations/2,
           locationsAndTamperProtectionsPairs/2,
           adversary/1,
           tamperProtections/2,
           connectionType/2,
           resourceContainer/1,
           dataTargets/2,
           dataSetMapEntry/1,
           parameterSources/2,
           parametersAndDataPairs/2,
           providedRole/2,
           requiredRole/2,
           requiredInterface/2,
           resourceContainer/2,
           assemblyContext/2,
           assemblyContext_AllocationContext/2,
           outerRequiredRole/2,
           providedInterface/2,
           outerProvidedRole/2,
           linkingResource/1,
           sharing/2,
           dataSet/1,
	   connectorSpecificParametersAndDataPairs/2,
	   originalParametersAndDataPair/2,
           requiringAssemblyContext/2,
	   providingAssemblyContext/2,

	   sizeOf/1,
	   call/0,
	   return/0
           from fromPalladio.

:- import  returnParameter/2,
	   hasService/2,
           hasParameter/2
           from componentRepositoryInstance.
% END IMPORTS

justify_pred(mayknow(_,_)).
justify_pred(includes(_,_,_)).
justify_pred(includesCall(_,_,_)).
justify_pred(tamperingAbilities(_,_,_)).
justify_pred(locationsAccessibleBy(_,_)).
justify_pred(furtherConnections(_,_)).
justify_pred(sharingOf(_,_)).
justify_pred(location(_,_,_)).
justify_pred(linkLocation(_,_,_)).
justify_pred(dataset(_)).
justify_pred(attacker(_)).

isLocation(Location) :- location(Location).

% TODO: there currently appears to be no palladio stereotype corresponding to uiInterfaceOn, as was required in the paper submission.
% Instead, i consider every interface provided by the system as an uiInterface. Isn't this what we want?
uiInterfaceOn(Container,Interface) :-
        outerProvidedRole(Connector,[ProvidedRole]),
        assemblyContext(Connector, [AssemblyContext]),
        assemblyContext_AllocationContext(AllocationContext,[AssemblyContext]),
        resourceContainer(AllocationContext,[Container]),
        providedInterface(ProvidedRole,[Interface]).
uiInterfaceOn(Container,Interface) :-
        outerRequiredRole(Connector,[ProvidedRole]),
        assemblyContext(Connector,        [AssemblyContext]),
        assemblyContext_AllocationContext(AllocationContext,[AssemblyContext]),
        resourceContainer(AllocationContext,[Container]),
        requiredInterface(ProvidedRole,[Interface]).


dataset(Dataset) :- dataSet(Dataset).
dataset(DatasetMapEntry) :- dataSetMapEntry(DatasetMapEntry).

attacker(Attacker) :- adversary(Attacker).

mayknow(Attacker,Dataset) :-
        mayKnowData(Attacker, Datasets),
        member(Dataset, Datasets).

% First: non-connection-specific paramatersAndDataPairs
% cases such as: parameterSources(6,[..,x,..]).
%    as well as: parameterSources(6,[..,sizeOf(x),..]).
includes(parm(Service,ParameterName), Dataset, Context) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(ParameterName, ParameterNames).

% cases such as: parameterSources(6,[..,*,..]).
includes(parm(Service,ParameterName), Dataset, Context) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).
includes(return(Service), Dataset, Context) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).
includes(sizeOf(return(Service)), Dataset, Context) :-
        returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).


% cases such as: parameterSources(6,[..,sizeOf(*),..]).
includes(parm(Service,sizeOf(ParameterName)), Dataset,Context) :-
        hasParameter(Service, parm(Service,sizeOf(ParameterName))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(sizeOf(*), ParameterNames).

includes(sizeOf(return(Service)), Dataset,Context) :-
        returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(sizeOf(*), ParameterNames).


% cases such as: parameterSources(6,[..,return,..]).
includes(return(Service), Dataset, Context) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(return, ParameterNames).

% TODO ALL default for calls? if nothing is specified no knowledge that a call has happened my flow
includesCall(Service, Dataset,Context) :-
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(call, ParameterNames).
includesCall(Service, Dataset,Context) :-
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).




lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames) :-
        hasService(Interface,Service),
        interfacesOn(_Container,Interface,Context),
        parametersAndDataPairs(Service, Pairs),
        member(Pair, Pairs),
        dataTargets(Pair, Datasets),
        member(Dataset, Datasets),
        parameterSources(Pair,ParameterNames).


% 2nd: connection-specific paramatersAndDataPairs
% cases such as: parameterSources(6,[..,x,..]).
%    as well as: parameterSources(6,[..,sizeOf(x),..]).
includes(parm(Service,ParameterName), Dataset, Context) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(ParameterName, ParameterNames).

% cases such as: parameterSources(6,[..,*,..]).
includes(parm(Service,ParameterName), Dataset, Context) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).

includes(return(Service), Dataset, Context) :-
	returnParameter(Service, return(Service)),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).
	
includes(sizeOf(return(Service)), Dataset, Context) :-
	returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).



% cases such as: parameterSources(6,[..,sizeOf(*),..]).
includes(parm(Service,sizeOf(ParameterName)), Dataset,Context) :-
        hasParameter(Service, parm(Service,sizeOf(ParameterName))),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(sizeOf(*), ParameterNames).
	
includes(sizeOf(return(Service)), Dataset,Context) :-
	returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(sizeOf(*), ParameterNames).


% cases such as: parameterSources(6,[..,return,..]).
includes(return(Service), Dataset, Context) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(return, ParameterNames).
	

% TODO ALL default for calls? if nothing is specified no knowledge that a call has happened my flow
includesCall(Service, Dataset,Context) :-
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(call, ParameterNames).
	
includesCall(Service, Dataset,Context) :-
        lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames),
        member(*, ParameterNames).



lookupDataSetParameterNamesConnectorSpecific(Context, Service, Dataset, ParameterNames) :-
        hasService(Interface,Service),
        connectorSpecificParametersAndDataPairs(Connector,Pairs),
        contextOfConnector(Connector, Context,Interface),

        member(Pair, Pairs),

        originalParametersAndDataPair(Pair,OriginalPair),
        parametersAndDataPairs(Service, OriginalPairs),
        member(OriginalPair,OriginalPairs),

        dataTargets(Pair, Datasets),
        member(Dataset, Datasets),
        parameterSources(Pair,ParameterNames).


contextOfConnector(Connector, Context, Interface) :-
	requiringAssemblyContext(Connector,[Context]),
        requiredRole(Connector, [RequiredRole]),
        requiredInterface(RequiredRole, [Interface]).
contextOfConnector(Connector, Context, Interface) :-
	providingAssemblyContext(Connector,[Context]),
        providedRole(Connector, [ProvidedRole]),
        providedInterface(ProvidedRole, [Interface]).




% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
tamperingAbilities(Attacker, Location, TamperProtection) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations),
        tamperProtections(Pair, TamperProtections),
        member(TamperProtection, TamperProtections).
tamperingAbilities(Attacker, Location, none) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location, Locations).

% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationsAccessibleBy(Attacker, Location) :-
        attacker(Attacker),
        isLocation(Location),
        once(tamperingAbilities(Attacker, Location, _TamperProtection)).


furtherConnections(Container,Mode) :- connectionType(Container,[Mode]).

sharingOf(Container,Mode) :- sharing(Container,[Mode]).
sharingOf(Container,exclusive) :-
        resourceContainer(Container),
        not(sharing(Container,_)).
sharingOf(Container,exclusive) :-
        sharing(Container,[]),
        resourceContainer(Container).



% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair) :-
        resourceContainer(Container),
        locationsAndTamperProtectionsPairs(Container,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).
location(Container,Location, TamperProtection) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
location(Container,Location, none) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(_TamperProtection, TamperProptections)
        )).


% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
% TODO MAX explain the semantics of an empty tamper protection set for the system spec and the adversary spec
linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair) :-
        linkingResource(LinkingResource),
        locationsAndTamperProtectionsPairs(LinkingResource,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).

linkLocation(LinkingResource,Location, TamperProtection) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
linkLocation(LinkingResource,Location, none) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(_TamperProtection, TamperProptections)
        )).

