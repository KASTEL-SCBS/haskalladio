% BEGIN IMPORTS
:- import  none/0
           from security.
:- import  return/1,
	   interfacesOn/3
           from palladio.
:- import  member/2
           from lists.

:- import  mayKnowData/2,
           location/1,
           locations/2,
           locationsAndTamperProtectionsPairs/2,
           adversary/1,
           tamperProtections/2,
           connectionType/2,
           resourceContainer/1,
           dataTargets/2,
           dataSetMapEntry/1,
           parameterSources/2,
           parametersAndDataPairs/2,
           providedRole/2,
           requiredRole/2,
           requiredInterface/2,
           resourceContainer/2,
           assemblyContext/2,
           assemblyContext_AllocationContext/2,
           outerRequiredRole/2,
           providedInterface/2,
           outerProvidedRole/2,
           linkingResource/1,
           sharing/2,
           dataSet/1,
           leftInterfaces/2,
           rightInterfaces/2,
           rightSpecificationParameter/2,
           leftSpecificationParameter/2,
           specificationParametersToReplace/2,
           assignedKey/2,
           equations/2,
           requiringAssemblyContext/2,
	   providingAssemblyContext/2,
           innerRequiredRole/2,
           requiredDelegationConnector/1,
           innerProvidedRole/2,
           providedDelegationConnector/1,
           assignments/2,
           assemblyConnector/1,
           nameFor/2,
	   map/2,

	   parameterizedDataSetMapEntry/1,
	   parameter/2,
	   sizeOf/1,
	   call/0,
	   return/0
           from fromPalladio.

:- import  returnParameter/2,
	   hasService/2,
           hasParameter/2
           from componentRepositoryInstance.
:- import  world/1
           from worldInstance.
% END IMPORTS

justify_pred(mayknow(_,_)).
justify_pred(includes(_,_,_,_)).
justify_pred(includesCall(_,_,_,_)).
justify_pred(tamperingAbilities(_,_,_)).
justify_pred(locationsAccessibleBy(_,_)).
justify_pred(furtherConnections(_,_)).
justify_pred(sharingOf(_,_)).
justify_pred(location(_,_,_)).
justify_pred(linkLocation(_,_,_)).
justify_pred(dataset(_)).
justify_pred(attacker(_)).
justify_pred(lookupDataSetParameterNames(_,_,_,_,_,_)).

isLocation(Location) :- location(Location).


lookupDataSets(Context, Interface, Dataset) :-
        hasService(Interface,Service),
        interfacesOn(_Container,Interface,Context),
        parametersAndDataPairs(Service, Pairs),
        member(Pair, Pairs),
        dataTargets(Pair, Datasets),
        member(Dataset, Datasets).



% specificationParametersAt(AssemblyContext,SpecificationParameter).
specificationParametersAt(AssemblyContext, Interface, SpecificationParameter) :-
	parameterizedDataSetMapEntry(DataSet),
	lookupDataSets(AssemblyContext, Interface, DataSet),
	parameter(DataSet,SpecificationParameters),
	member(SpecificationParameter, SpecificationParameters).

withVar([],[]).
withVar([X|XS], [(X,_Y)|WV]) :- withVar(XS, WV).

equal((AssemblyContext, Interface1,  SpecificationParameter1), (AssemblyContext, Interface2,  SpecificationParameter2)) :-
	equations(AssemblyContext, Equations),
	member(Equation, Equations),
	% specificationParameterEquation(Equation),
	leftSpecificationParameter(Equation, [SpecificationParameter1]),
	rightSpecificationParameter(Equation, [SpecificationParameter2]),
	leftInterfaces(Equation,LeftInterfaces),
	member(Interface1, LeftInterfaces),
	rightInterfaces(Equation,RightInterfaces),
	member(Interface2, RightInterfaces).
equal((AssemblyContext1, Interface,  SpecificationParameter), (AssemblyContext2, Interface,  SpecificationParameter)) :-
	assemblyConnector(Connector),
	requiringAssemblyContext(Connector, AssemblyContexts1),
	member(AssemblyContext1,  AssemblyContexts1),
	requiredRole(Connector, Roles1), member(Role1, Roles1), requiredInterface(Role1, Interfaces1), member(Interface, Interfaces1),
	providingAssemblyContext(Connector, AssemblyContexts2),
	member(AssemblyContext2,  AssemblyContexts2),
	providedRole(Connector, Roles2), member(Role2, Roles2), providedInterface(Role2, Interfaces2), member(Interface, Interfaces2),
	specificationParametersAt(AssemblyContext1, Interface, SpecificationParameter),
	specificationParametersAt(AssemblyContext2, Interface, SpecificationParameter).
	
assigned((AssemblyContext, Interface, SpecificationParameter), Key) :-
	(  assemblyConnector(Connector)
	;  providedDelegationConnector(Connector)
	;  requiredDelegationConnector(Connector)
	),
	assignments(Connector, Assignments),
	member(Assignment, Assignments),
	% dataSetMapParameter2KeyAssignment(Assignment),
	assignedKey(Assignment, [Key]),
	specificationParametersToReplace(Assignment,SpecificationParameters),
	member(SpecificationParameter, SpecificationParameters),
	(  (requiringAssemblyContext(Connector, Contexts), requiredRole(Connector, Roles),      member(Role, Roles), requiredInterface(Role, Interfaces))
	;  (providingAssemblyContext(Connector, Contexts), providedRole(Connector, Roles),      member(Role, Roles), providedInterface(Role, Interfaces))
	;  (providedDelegationConnector(Connector),
	             assemblyContext(Connector, Contexts), innerProvidedRole(Connector, Roles), member(Role, Roles), providedInterface(Role, Interfaces)
	          % ,                                      outerProvidedRole(Connector, Roles), member(Role, Roles), providedInterface(Role, Interfaces)
	   )
	;  (requiredDelegationConnector(Connector),
	             assemblyContext(Connector, Contexts), innerRequiredRole(Connector, Roles), member(Role, Roles), requiredInterface(Role, Interfaces)
	          % ,                                      outerRequiredRole(Connector, Roles), member(Role, Roles), requiredInterface(Role, Interfaces)
	   )
	),
	member(AssemblyContext, Contexts),
	member(Interface, Interfaces),
	specificationParametersAt(AssemblyContext, Interface, SpecificationParameter).


mylookup(K,[(K,V)|_], V) :- !.
mylookup(K,[_|KVS], V) :- mylookup(K,KVS,V).


specificationParameterEquivalences(WithVars) :-
	setof((_AssemblyContext, _Interface, _SpecificationParameter), specificationParametersAt(_AssemblyContext, _Interface, _SpecificationParameter), _Parameters),
	!,
	withVar(_Parameters, WithVars),
	bagof(     (Left, Right),  equal(Left, Right), Equals),
	unifyAll(WithVars, Equals).
specificationParameterEquivalences([]).




specificationParameterEquivalencesWithAssignments(WithVars) :-
	specificationParameterEquivalences(WithVars),
	findall((Left, Key), assigned(Left, Key), Assignments),
	assignAll(WithVars, Assignments).
	



sworld(WithVars) :-
	specificationParameterEquivalencesWithAssignments(WithVars).
	% generateWorld(WithVars).

parameterValue(Value) :-
	dataSetMapEntry(Entry),
	nameFor(Entry, [Value]).
generateWorld([]).
generateWorld([((_AssemblyContext, _Interface, _SpecificationParameter), Key)|Rest]) :-
	var(Key),
	!,
	parameterValue(Key),
	generateWorld(Rest).
generateWorld([((_AssemblyContext, _Interface, _SpecificationParameter), _  )|Rest]) :-
	generateWorld(Rest).
	
	
unifyAll(_, []).
unifyAll(WithVars, [(Left,Right)|Rest]) :-
	mylookup(Left,  WithVars, Var1),
	mylookup(Right, WithVars, Var2),
	Var1 = Var2,
	!,
	unifyAll(WithVars, Rest).
unifyAll(WithVars, [(_,_)|Rest]) :-
	unifyAll(WithVars, Rest).


assignAll(_, []).
assignAll(WithVars, [(Left,Key)|Rest]) :-
	mylookup(Left,  WithVars, Var),
	Var = Key,
	!,
	assignAll(WithVars, Rest).
assignAll(WithVars, [(_,_)|Rest]) :-
	assignAll(WithVars, Rest).


% unifyAll(WithVars, Var1, Var2) :-
% 	% equal((AssemblyContext, Interface1,  SpecificationParameter1), (AssemblyContext, Interface2,  SpecificationParameter2)),
% 	mylookup((AssemblyContext, Interface1,  SpecificationParameter1), WithVars, Var1),
% 	mylookup((AssemblyContext, Interface2,  SpecificationParameter2), WithVars, Var2),
% 	Var1 = Var2.
% 	% unify(((AssemblyContext, Interface1,  SpecificationParameter1), Var1),
% 	%       ((AssemblyContext, Interface2,  SpecificationParameter2), Var2)).





% TODO: there currently appears to be no palladio stereotype corresponding to uiInterfaceOn, as was required in the paper submission.
% Instead, i consider every interface provided by the system as an uiInterface. Isn't this what we want?
uiInterfaceOn(Container,Interface) :-
        outerProvidedRole(Connector,[ProvidedRole]),
        assemblyContext(Connector, [AssemblyContext]),
        assemblyContext_AllocationContext(AllocationContext,[AssemblyContext]),
        resourceContainer(AllocationContext,[Container]),
        providedInterface(ProvidedRole,[Interface]).
uiInterfaceOn(Container,Interface) :-
        outerRequiredRole(Connector,[ProvidedRole]),
        assemblyContext(Connector,        [AssemblyContext]),
        assemblyContext_AllocationContext(AllocationContext,[AssemblyContext]),
        resourceContainer(AllocationContext,[Container]),
        requiredInterface(ProvidedRole,[Interface]).


dataset(Dataset) :- dataSet(Dataset).
dataset(DatasetMapEntry) :- dataSetMapEntry(DatasetMapEntry).

attacker(Attacker) :- adversary(Attacker).

mayknow(Attacker,Dataset) :-
        mayKnowData(Attacker, Datasets),
        member(Dataset, Datasets).

% First: non-connection-specific paramatersAndDataPairs
% cases such as: parameterSources(6,[..,x,..]).
%    as well as: parameterSources(6,[..,sizeOf(x),..]).
includes(parm(Service,ParameterName), Dataset, Context, World) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(ParameterName, ParameterNames).

% cases such as: parameterSources(6,[..,*,..]).
includes(parm(Service,ParameterName), Dataset, Context, World) :-
        hasParameter(Service, parm(Service,ParameterName)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(*, ParameterNames).
includes(return(Service), Dataset, Context, World) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(*, ParameterNames).
includes(sizeOf(return(Service)), Dataset, Context, World) :-
        returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(*, ParameterNames).


% cases such as: parameterSources(6,[..,sizeOf(*),..]).
includes(parm(Service,sizeOf(ParameterName)), Dataset,Context, World) :-
        hasParameter(Service, parm(Service,sizeOf(ParameterName))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(sizeOf(*), ParameterNames).

includes(sizeOf(return(Service)), Dataset,Context, World) :-
        returnParameter(Service, sizeOf(return(Service))),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(sizeOf(*), ParameterNames).


% cases such as: parameterSources(6,[..,return,..]).
includes(return(Service), Dataset, Context, World) :-
        returnParameter(Service, return(Service)),
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(return, ParameterNames).

% TODO ALL default for calls? if nothing is specified no knowledge that a call has happened my flow
includesCall(Service, Dataset,Context, World) :-
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(call, ParameterNames).
includesCall(Service, Dataset,Context, World) :-
        lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, World, Substitution),
        member(*, ParameterNames).



dataSetMapEntryFor((DataSetRef, ParameterValue), DataSetMapEntry) :-
	map(DataSetRef,      [Parameterized]),
	map(DataSetMapEntry, [Parameterized]),
	dataSetMapEntry(DataSetMapEntry),
	nameFor(DataSetMapEntry, [ParameterValue]).

lookupDataSetParameterNames(Context, Service, Dataset, ParameterNames, world(World), Substitution) :-
        hasService(Interface,Service),
        interfacesOn(_Container,Interface,Context),
        parametersAndDataPairs(Service, Pairs),
        member(Pair, Pairs),
        dataTargets(Pair, DatasetRefs),
        member(DatasetRef, DatasetRefs),
        ( (dataSetMapEntry(DatasetRef),
	     Dataset = DatasetRef
	  )
	; (parameterizedDataSetMapEntry(DatasetRef),
	     parameter(DatasetRef, [Parameter]),
	     mylookup((Context, Interface, Parameter), World, ParameterValue),
	     ( (var(ParameterValue),
	          fmt_write_string(SubsLeft, "'subs((%S, %S, %S)", args(Context, Interface, Parameter)),
	          atom_concat(SubsLeft, ' ↦ ', SubsLeftMapsTo),
	          % fmt_write_string(SubsLeft, "'%S |-> ", args(ParameterValue)),
	          dataSetMapEntryFor((DatasetRef, ParameterValue), Dataset),
	          fmt_write_string(SubsRight, "%s'", args(ParameterValue)),
	          atom_concat(SubsLeftMapsTo,SubsRight,Substitution)
	          % dataSetMapEntryFor((DatasetRef, ParameterValue), Dataset),
	          % Substitution = subs((Context, Interface, Parameter), ParameterValue)
	       )
	     ; (atom(ParameterValue),
	          dataSetMapEntryFor((DatasetRef, ParameterValue), Dataset)
	       )
	     )
	  )
	; (dataSet(DatasetRef),
	     Dataset = DatasetRef
	  )
	),
        parameterSources(Pair,ParameterNames).




% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
tamperingAbilities(Attacker, Location, TamperProtection) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations),
        tamperProtections(Pair, TamperProtections),
        member(TamperProtection, TamperProtections).
tamperingAbilities(Attacker, Location, none) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location, Locations).

% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationsAccessibleBy(Attacker, Location) :-
        attacker(Attacker),
        isLocation(Location),
        once(tamperingAbilities(Attacker, Location, _TamperProtection)).


furtherConnections(Container,Mode) :- connectionType(Container,[Mode]).

sharingOf(Container,Mode) :- sharing(Container,[Mode]).
sharingOf(Container,exclusive) :-
        resourceContainer(Container),
        not(sharing(Container,_)).
sharingOf(Container,exclusive) :-
        sharing(Container,[]),
        resourceContainer(Container).



% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair) :-
        resourceContainer(Container),
        locationsAndTamperProtectionsPairs(Container,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).
location(Container,Location, TamperProtection) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
location(Container,Location, none) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(_TamperProtection, TamperProptections)
        )).


% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
% TODO MAX explain the semantics of an empty tamper protection set for the system spec and the adversary spec
linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair) :-
        linkingResource(LinkingResource),
        locationsAndTamperProtectionsPairs(LinkingResource,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).

linkLocation(LinkingResource,Location, TamperProtection) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
linkLocation(LinkingResource,Location, none) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(_TamperProtection, TamperProptections)
        )).

