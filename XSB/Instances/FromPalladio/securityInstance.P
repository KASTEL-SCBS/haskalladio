% BEGIN IMPORTS
:- import  none/0
           from security.
:- import  return/1
           from palladio.
:- import  member/2
           from lists.

:- import  mayKnowDataSets/2,
           location/1,
           locations/2,
           locationsAndTamperProtectionsPairs/2,
           adversary/1,
           tamperProtections/2,
           connectionType/2,
           resourceContainer/1,
           dataSetTargets/2,
           parameterSources/2,
           parametersAndDataSetsPairs/2,
           requiredInterface/2,
           resourceContainer/2,
           assemblyContext/2,
           assemblyContext_AllocationContext/2,
           outerRequiredRole/2,
           providedInterface/2,
           outerProvidedRole/2,
           linkingResource/1,
           sharing/2,
           dataSet/1
           from fromPalladio.

:- import  system/1
           from palladioInstance.
:- import  outputParameters/2,
           inputParameters/2
           from componentRepositoryInstance.
% END IMPORTS

justify_pred(mayknow(_,_)).
justify_pred(includes(_,_)).
justify_pred(includesCall(_,_)).
justify_pred(tamperingAbilities(_,_,_)).
justify_pred(locationsAccessibleBy(_,_)).
justify_pred(furtherConnections(_,_)).
justify_pred(sharingOf(_,_)).
justify_pred(location(_,_,_)).
justify_pred(linkLocation(_,_,_)).
justify_pred(dataset(_)).
justify_pred(attacker(_)).

isLocation(Location) :- location(Location).

% TODO: there currently appears to be no palladio stereotype corresponding to uiInterfaceOn, as was required in the paper submission.
% Instead, i consider every interface provided by the system as an uiInterface. Isn't this what we want?
uiInterfaceOn(Container,Interface) :-
        system(_System),                                     % TODO: add wellformedness-condition that there is only one system? This is somehwat redundant!!
        outerProvidedRole(Connector,ProvidedRole),
        assemblyContext(Connector,        AssemblyContext),
        assemblyContext_AllocationContext(AllocationContext,AssemblyContext),
        resourceContainer(AllocationContext,Container),
        providedInterface(ProvidedRole,Interface).
uiInterfaceOn(Container,Interface) :-
        system(_System),
        outerRequiredRole(Connector,ProvidedRole),
        assemblyContext(Connector,        AssemblyContext),
        assemblyContext_AllocationContext(AllocationContext,AssemblyContext),
        resourceContainer(AllocationContext,Container),
        requiredInterface(ProvidedRole,Interface).


dataset(Dataset) :- dataSet(Dataset).

attacker(Attacker) :- adversary(Attacker).

mayknow(Attacker,Dataset) :-
        mayKnowDataSets(Attacker, Datasets),
        member(Dataset, Datasets).

includes(parm(Service,ParameterName), Dataset) :-
        inputParameters(Service, parm(Service,ParameterName)),
        parametersAndDataSetsPairs(Service, Pairs),
        member(Pair, Pairs),
        parameterSources(Pair,ParameterNames),
        member(ParameterName, ParameterNames),
        dataSetTargets(Pair, Datasets),
        member(Dataset, Datasets).

includes(return(Service), Dataset) :-
        outputParameters(Service, return(Service)),
        parametersAndDataSetsPairs(Service, Pairs),
        member(Pair, Pairs),
        parameterSources(Pair,ParameterNames),
        member(\return, ParameterNames),
        dataSetTargets(Pair, Datasets),
        member(Dataset, Datasets).

% TODO MAX check that a backslash is always followed by return or call and implement other well-formedness checks for specification
% TODO ALL default for calls? if nothing is specified no knowledge that a call has happened my flow
includesCall(Service, Dataset) :-
        parametersAndDataSetsPairs(Service, Pairs),
        member(Pair, Pairs),
        parameterSources(Pair,ParameterNames),
        member(\call, ParameterNames),
        dataSetTargets(Pair, Datasets),
        member(Dataset, Datasets).

% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
tamperingAbilities(Attacker, Location, TamperProtection) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations),
        tamperProtections(Pair, TamperProtections),
        member(TamperProtection, TamperProtections).
tamperingAbilities(Attacker, Location, none) :-
        adversary(Attacker),
        locationsAndTamperProtectionsPairs(Attacker,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location, Locations).

% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationsAccessibleBy(Attacker, Location) :- tamperingAbilities(Attacker, Location, _TamperProtection), !.


furtherConnections(Container,Mode) :- connectionType(Container,Mode).

sharingOf(Container,Mode) :- sharing(Container,Mode).


% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair) :-
        resourceContainer(Container),
        locationsAndTamperProtectionsPairs(Container,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).
location(Container,Location, TamperProtection) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
location(Container,Location, none) :-
        locationWithOrWithoutSpecifiedTamperProtection(Container,Location,Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(TamperProtection, TamperProptections)
        )).


% TODO: this differs somewhat from the description in the paper, owing to the different specification via tamper/location pairs.
% TODO MAX explain the semantics of an empty tamper protection set for the system spec and the adversary spec
linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair) :-
        linkingResource(LinkingResource),
        locationsAndTamperProtectionsPairs(LinkingResource,Pairs),
        member(Pair,Pairs),
        locations(Pair,Locations),
        member(Location,Locations).

linkLocation(LinkingResource,Location, TamperProtection) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        tamperProtections(Pair, TamperProptections),
        member(TamperProtection, TamperProptections).
linkLocation(LinkingResource,Location, none) :-
        linkLocationWithOrWithoutSpecifiedTamperProtection(LinkingResource,Location, Pair),
        not((
          tamperProtections(Pair, TamperProptections),
          member(TamperProtection, TamperProptections)
        )).

