% BEGIN IMPORTS
:- import  requires/2,
           hasParameter/2,
           returnParameter/2,
           hasService/2
           from componentRepositoryInstance.
:- import  connects/3,
           componentOf/2,
           runsOn/2,
           systemAssembledTo/3,
           byAssembly/1
           from palladioInstance.

:- import  interfacesOn/2,
           parametersOf/2
           from palladio.

:- import  linksDataAccessibleBy/3,
           containersFullyAccessibleBy/2,
           providedInterfacesAccessibleTo/2,
           requiredInterfacesAccessibleTo/2
           from security.

:- import  includesCall/2,
           includes/2
           from securityInstance.
% END IMPORTS
% BEGIN EXPORTS
:- export  % Predicates
           parameterAllowedToBeAccessedBy/2,        % parameterAllowedToBeAccessedBy(Attacker, Parameter)
           serviceAllowedToBeObservedBy/2,          % parameterAllowedToBeAccessedBy(Attacker, Parameter)

           accessibleParameters/2,                  % accessibleParameters(Attacker,Parameter)
           observableServices/2.                    % observableServices(Attacker,Parameter)
% END EXPORTS

justify_pred(accessibleParameters(_,_)).
justify_pred(observableServices(_,_)).

accessibleParameters(Attacker,Parameter) :-
  % Ausgabe-Parameter, auf die der Angreifer als regulärer "Benutzer" des Systems Zugriff hat
  providedInterfacesAccessibleTo(Attacker,Interface),
  hasService(Interface,Service),
  returnParameter(Service, Parameter).

accessibleParameters(Attacker,Parameter) :-
  % Eingabe-Parameter,auf die der Angreifer als regulärer "Benutzer" des Systems Zugriff hat, weil er vom System Aufgerufen wird.
  requiredInterfacesAccessibleTo(Attacker,Interface),
  hasService(Interface,Service),
  hasParameter(Service, Parameter).

accessibleParameters(Attacker,Parameter) :-
  % Parameter, auf die der Angreifer Zugriff hat, weil er einen entsprechenden ResourceContainer angreifen konnte.
  containersFullyAccessibleBy(Attacker, Container),
  interfacesOn(Container,Interface),
  hasService(Interface,Service),
  parametersOf(Service,Parameter).

accessibleParameters(Attacker,Parameter) :-
  % Parameter, auf die der Angreifer Zugriff hat, weil er eine entsprechende LinkResource angreifen konnte.
  linksDataAccessibleBy(Attacker, Link, DataSet),
  connects(Link,ContainerLeft,ContainerRight),
  runsOn(Left,ContainerLeft),
  componentOf(Left,Component),
  requires(Component,Interface),
  systemAssembledTo(Left,Interface,byAssembly(Right)),
  runsOn(Right,ContainerRight),
  hasService(Interface, Service),
  parametersOf(Service,Parameter),
  includes(Parameter,DataSet).


observableServices(Attacker, Service) :-
  % Services, deren Aufrufe der Angreifer als regulärer "Benutzer" des Systems beobachten kann
  requiredInterfacesAccessibleTo(Attacker,Interface),
  hasService(Interface, Service).

observableServices(Attacker,Service) :-
  % Services, deren Aufrufe der Angreifer beobachten kann, weil er einen entsprechenden ResourceContainer angreifen konnte.
  containersFullyAccessibleBy(Attacker,Container),
  interfacesOn(Container,Interface),
  hasService(Interface,Service).

observableServices(Attacker, Service) :-
  % Services, deren Aufrufe der Angreifer beobachten kann, weil er eine entsprechende LinkResource angreifen konnte.
  linksDataAccessibleBy(Attacker, Link, DataSet),
  connects(Link,ContainerLeft, ContainerRight),
  runsOn(Left,ContainerLeft),
  componentOf(Left,Component),
  requires(Component,Interface),
  systemAssembledTo(Left,Interface,byAssembly(Right)),
  runsOn(Right,ContainerRight),
  hasService(Interface,Service),
  includesCall(Service,DataSet).
