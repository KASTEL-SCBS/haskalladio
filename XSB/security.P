% BEGIN IMPORTS
:- import  exposesPhysicallyAccessibleDataTo/3 from linkModel.

:- import  mayknow/2,
           tamperingAbilities/3,
           locationsAccessibleBy/2,
           furtherConnections/2,
           sharingOf/2,
           location/3,
           includesCall/4,
           includes/4,
           uiInterfaceOn/2,
           worldFor/3,
           provided/1,
           required/1,
           mylookup/3,
           assignedBy/4,
           connectorFor/2,
           linkLocation/3
           from securityInstance.


:- import  accessibleParameters/5,
           observableServices/5
           from abstractAnalysis.

:- import  providedInterfacesOn/3,
           requiredInterfacesOn/3
           from palladio.

:- import  world/1
           from worldInstance.
% END IMPORTS

% BEGIN EXPORTS
:- export  % Predicates
           isInSecureWithRespectTo/2,               % isInSecureWithRespectTo(Attacker,World)

           containersFullyAccessibleBy/2,           % containersFullyAccessibleBy(Attacker,ResourceContainer)
           linksDataAccessibleBy/3,                 % linksDataAccessibleBy(Attacker,LinkingResource, Dataset)

           linkAccessibleBy/3,             % linkAccessibleBy(Attacker,Link,Location)
           containersPhysicalAccessibleBy/3,        % containersPhysicalAccessibleBy(Attacker,Container,Location)

           providedInterfacesAccessibleTo/4,        % providedInterfacesAccessibleTo(Attacker, Interface, AssemblyContext, World)
           requiredInterfacesAccessibleTo/4,        % requiredInterfacesAccessibleTo(Attacker, Interface, AssemblyContext, World)

           parameterAllowedToBeAccessedBy/4,        % parameterAllowedToBeAccessedBy(Attacker, Parameter, World)
           serviceAllowedToBeObservedBy/4,          % parameterAllowedToBeAccessedBy(Attacker, Parameter, World)

           % Used Functors
           % Sharing = OpenShared | ControlledExclusive
           shared/0, exclusive/0,
           % FurtherConnections = Possible | Existing | Complete
           possible/0, existing/0, complete/0,
           % Default tampering Abiility
           none/0.
% END EXPORTS

justify_pred(isInSecureWithRespectTo(_,_)).
justify_pred(isInSecureWithRespectToService(_,_,_,_,_)).
justify_pred(isInSecureWithRespectToParameter(_,_,_,_,_)).
justify_pred(containersFullyAccessibleBy(_,_)).
justify_pred(linksDataAccessibleBy(_,_,_)).
justify_pred(linkAccessibleBy(_,_,_)).
justify_pred(containersPhysicalAccessibleBy(_,_,_)).
justify_pred(providedInterfacesAccessibleTo(_,_,_,_)).
justify_pred(requiredInterfacesAccessibleTo(_,_,_,_)).
justify_pred(serviceAllowedToBeObservedBy(_,_,_,_)).
justify_pred(parameterAllowedToBeAccessedBy(_,_,_,_)).
justify_pred(serviceForbiddenToBeObservedBy(_,_,_,_)).
justify_pred(parameterForbiddenToBeAccessedBy(_,_,_,_)).
justify_pred(isInSecureWithRespectToService(_,_,_,_,_)).


isInSecureWithRespectTo(Attacker, World) :-
        accessibleParameters(Attacker,Parameter, Context, InterfaceWithRole, World),
        isInSecureWithRespectToParameter(Attacker,Parameter, Context, InterfaceWithRole, World).
isInSecureWithRespectToParameter(Attacker,Parameter, Context, InterfaceWithRole, World) :-
        worldFor((Context, InterfaceWithRole), World, WorldFor),
        parameterForbiddenToBeAccessedBy(Attacker,Parameter, Context, WorldFor), !. % Fow now, only report the first world a violation is found in. TODO: somehow deal with "equivalent" violations?
% This is needed because of https://sourceforge.net/p/xsb/bugs/227/
parameterForbiddenToBeAccessedBy(Attacker,Parameter, Context, WorldFor) :- not(parameterAllowedToBeAccessedBy(Attacker,Parameter, Context, WorldFor)). 

isInSecureWithRespectTo(Attacker, World) :-
        observableServices(Attacker,Service, Context, InterfaceWithRole, World),
        isInSecureWithRespectToService(Attacker,Service, Context, InterfaceWithRole, World).
isInSecureWithRespectToService(Attacker,Service, Context, InterfaceWithRole, World) :-
        worldFor((Context, InterfaceWithRole), World, WorldFor),
        serviceForbiddenToBeObservedBy(Attacker,Service, Context, WorldFor), !.  % Fow now, only report the first world a violation is found in. TODO: somehow deal with "equivalent" violations?
% This is needed because of https://sourceforge.net/p/xsb/bugs/227/
serviceForbiddenToBeObservedBy(Attacker,Service, Context, WorldFor) :- not(serviceAllowedToBeObservedBy(Attacker,Service, Context, WorldFor)).



serviceAllowedToBeObservedBy(Attacker, Service, Context, World) :-
        includesCall(Service, DataSet, Context, World),
        mayknow(Attacker, DataSet).


parameterAllowedToBeAccessedBy(Attacker, Parameter, Context, World) :-
        includes(Parameter, DataSet, Context, World),
        mayknow(Attacker, DataSet).


containersFullyAccessibleBy(Attacker,Container) :-
        containersPhysicalAccessibleBy(Attacker,Container,Location),
        location(Container,Location,Method),
        tamperingAbilities(Attacker,Location,Method).
containersFullyAccessibleBy(_,Container) :-
        sharingOf(Container,shared),
        furtherConnections(Container,existing).
containersFullyAccessibleBy(Attacker,Container) :-
        containersPhysicalAccessibleBy(Attacker,Container,_),
        sharingOf(Container,shared),
        furtherConnections(Container,possible).


linksDataAccessibleBy(Attacker,Link,Dataset) :-
    linkAccessibleBy(Attacker,Link,Location),
    linkLocation(Link,Location,Method),
    tamperingAbilities(Attacker,Location,Method),
    exposesPhysicallyAccessibleDataTo(Link,Attacker,Dataset).


linkAccessibleBy(Attacker,Link,Location) :-
    linkLocation(Link,Location,_),
    locationsAccessibleBy(Attacker,Location).

containersPhysicalAccessibleBy(Attacker,Container,Location) :-
    location(Container,Location,_),
    locationsAccessibleBy(Attacker,Location).

providedInterfacesAccessibleTo(Attacker, Interface, Context, world((World, _Constraints))) :- 
    containersPhysicalAccessibleBy(Attacker,Container,_),
    providedInterfacesOn(Container, Interface, Context),
    uiInterfaceOn(Container, Interface),
    connectorFor((Context, provided(Interface)), Connector),
    (  not(assignedBy(Assignment, Connector, SpecificationParameter, ParameterValue))
    ;     (assignedBy(Assignment, Connector, SpecificationParameter, ParameterValue),
           mylookup((Context, provided(Interface), SpecificationParameter), World, ParameterValue))
    ).

requiredInterfacesAccessibleTo(Attacker, Interface, Context, world((World, _Constraints))) :- 
    containersPhysicalAccessibleBy(Attacker,Container,_),
    requiredInterfacesOn(Container, Interface, Context),
    uiInterfaceOn(Container, Interface),
    connectorFor((Context, required(Interface)), Connector),
    (  not(assignedBy(Assignment, Connector, SpecificationParameter, ParameterValue))
    ;     (assignedBy(Assignment, Connector, SpecificationParameter, ParameterValue),
           mylookup((Context, required(Interface), SpecificationParameter), World, ParameterValue))
    ).
